{"version":3,"sources":["Cell.tsx","Arrow.tsx","Visualizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","this","props","x","y","val","style","className","textAlign","backgroundColor","borderRadius","left","CELL_SIZE","top","width","height","React","Component","Arrow","x1","y1","x2","y2","id","markerWidth","markerHeight","refX","refY","orient","d","INITIAL_POS","TreeNode","right","Visualizer","state","root","value","depth","Math","floor","setState","event","preventDefault","formData","FormData","target","document","getElementById","reset","content","get","toString","split","map","s","parseInt","filter","v","length","slice","insertNode","console","log","node","op","seen","mapped","n","shift","push","random","done","dfs","key","arrows","a","backgroundSize","color","onSubmit","e","handleInsert","name","onClick","insertRandom","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa3d4a00.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CELL_SIZE } from \"./Visualizer\";\r\nexport default class Cell extends React.Component<any, any> {\r\n  render() {\r\n    const { x, y, val, style } = this.props;\r\n    return (\r\n      <div\r\n        className=\"Cell\"\r\n        style={{\r\n          textAlign: \"center\",\r\n          backgroundColor: \"red\",\r\n          borderRadius: \"50%\",\r\n          left: `${CELL_SIZE * x + 1}px`,\r\n          top: `${CELL_SIZE * y + 1}px`,\r\n          width: `${CELL_SIZE}px`,\r\n          height: `${CELL_SIZE}px`,\r\n          ...style\r\n        }}\r\n      >\r\n        {val}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Arrow.css\";\r\nimport { CELL_SIZE } from \"./Visualizer\";\r\nexport default class Arrow extends React.Component<any, any> {\r\n  render() {\r\n    const { x1, y1, x2, y2 } = this.props;\r\n    return (\r\n      <div>\r\n        <div>\r\n          <svg id=\"connectors\" height=\"100%\" width=\"100%\">\r\n            <defs>\r\n              <marker\r\n                id=\"markerArrow\"\r\n                markerWidth=\"10\"\r\n                markerHeight=\"10\"\r\n                refX=\"2\"\r\n                refY=\"6\"\r\n                orient=\"auto\"\r\n              >\r\n                <path d=\"M2,2 L2,11 L10,6 L2,2\" />\r\n              </marker>\r\n            </defs>\r\n            <line x1={x1} y1={y1} x2={x2} y2={y2} className=\"arrow\" />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Visualizer.css\";\r\nimport Cell from \"./Cell\";\r\nimport Arrow from \"./Arrow\";\r\n\r\nexport const CELL_SIZE = 28;\r\nconst WIDTH = 1800;\r\nconst HEIGHT = 800;\r\nconst INITIAL_POS = {\r\n  x: 30,\r\n  y: 2,\r\n};\r\nclass TreeNode {\r\n  val: number;\r\n  left: TreeNode | null;\r\n  right: TreeNode | null;\r\n  x: number;\r\n  y: number;\r\n  style: any;\r\n  constructor(val = 0, x: number, y: number) {\r\n    this.val = val;\r\n    this.left = null;\r\n    this.right = null;\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\nclass Visualizer extends React.Component<any, any> {\r\n  state: {\r\n    root: TreeNode | null;\r\n  } = {\r\n    root: null,\r\n  };\r\n\r\n  insertNode(value: number, root: TreeNode) {\r\n    let depth = 1;\r\n    let width = 14;\r\n    while (root.val !== value) {\r\n      if (value < root.val) {\r\n        if (root.left === null) {\r\n          root.left = new TreeNode(value, root.x - width, root.y + depth * 1.5);\r\n          break;\r\n        } else {\r\n          root = root.left;\r\n          depth++;\r\n          width = Math.floor(width * 0.6);\r\n        }\r\n      } else if (value > root.val) {\r\n        if (root.right === null) {\r\n          root.right = new TreeNode(\r\n            value,\r\n            root.x + width,\r\n            root.y + depth * 1.5\r\n          );\r\n          break;\r\n        } else {\r\n          root = root.right;\r\n          depth++;\r\n          width = Math.floor(width * 0.6);\r\n        }\r\n      } else {\r\n        break;\r\n      }\r\n      if (depth > 5) {\r\n        return;\r\n      }\r\n    }\r\n    this.setState(this.state);\r\n  }\r\n  handleInsert(event: any) {\r\n    event.preventDefault();\r\n    const formData = new FormData(event.target);\r\n    const form = document.getElementById(\"value-form\") as HTMLFormElement;\r\n    form!.reset();\r\n    let content = formData.get(\"content\")?.toString();\r\n    if (!content) {\r\n      console.log(\"! content\");\r\n      return;\r\n    }\r\n    let split = content\r\n      .split(\",\")\r\n      .map((s) => parseInt(s, 10))\r\n      .filter((v) => typeof v === \"number\");\r\n    if (split.length < 1) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.root === null) {\r\n      let root = new TreeNode(split[0], INITIAL_POS.x, INITIAL_POS.y);\r\n      this.setState({ root }, () => {\r\n        for (let v of split.slice(1)) {\r\n          this.insertNode(v, root);\r\n        }\r\n      });\r\n    } else {\r\n      for (let v of split) {\r\n        this.insertNode(v, this.state.root);\r\n      }\r\n    }\r\n  }\r\n  dfs(node: TreeNode | null, op: (node: TreeNode) => any) {\r\n    if (node === null) {\r\n      return;\r\n    }\r\n    let seen: TreeNode[] = [node];\r\n    let mapped = [];\r\n    while (seen.length > 0) {\r\n      let n: TreeNode = seen.shift() as TreeNode;\r\n      mapped.push(op(n));\r\n      if (n.left !== null) {\r\n        seen.push(n.left);\r\n      }\r\n      if (n.right !== null) {\r\n        seen.push(n.right);\r\n      }\r\n    }\r\n    return mapped;\r\n  }\r\n  insertRandom() {\r\n    let val = Math.floor(Math.random() * Math.floor(100));\r\n    if (this.state.root === null) {\r\n      this.setState({\r\n        root: new TreeNode(val, INITIAL_POS.x, INITIAL_POS.y),\r\n        done: false,\r\n      });\r\n    } else {\r\n      this.insertNode(val, this.state.root);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let mapped = this.dfs(this.state.root, (n) => (\r\n      <Cell style={n.style} val={n.val} x={n.x} y={n.y} key={`${n.val}`} />\r\n    ));\r\n    let arrows = this.dfs(this.state.root, (node) => {\r\n      let a = [];\r\n      if (node.left !== null) {\r\n        let x1 = node.x * CELL_SIZE;\r\n        let x2 = node.left.x * CELL_SIZE + CELL_SIZE;\r\n        let y1 = node.y * CELL_SIZE + CELL_SIZE / 2;\r\n        let y2 = node.left.y * CELL_SIZE;\r\n        a.push(<Arrow x1={x1} x2={x2} y1={y1} y2={y2} />);\r\n      }\r\n      if (node.right !== null) {\r\n        let x1 = node.x * CELL_SIZE + CELL_SIZE;\r\n        let x2 = node.right.x * CELL_SIZE;\r\n        let y1 = node.y * CELL_SIZE + CELL_SIZE / 2;\r\n        let y2 = node.right.y * CELL_SIZE;\r\n        a.push(<Arrow x1={x1} x2={x2} y1={y1} y2={y2} />);\r\n      }\r\n      return [...a];\r\n    });\r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"Board\"\r\n          style={{\r\n            width: WIDTH,\r\n            height: HEIGHT,\r\n            backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`,\r\n          }}\r\n        >\r\n          {mapped}\r\n          {arrows}\r\n        </div>\r\n        <div\r\n          className=\"controls\"\r\n          style={{ color: \"white\", textAlign: \"center\" }}\r\n        >\r\n          <form id=\"value-form\" onSubmit={(e) => this.handleInsert(e)}>\r\n            Values to add (comma separated):{\" \"}\r\n            <input id=\"content\" name=\"content\"></input>\r\n            <button className=\"button\">Add</button>\r\n            <button onClick={() => this.insertRandom()} className=\"button\">\r\n              Random\r\n            </button>\r\n            <button\r\n              onClick={() => this.setState({ root: null })}\r\n              className=\"button\"\r\n            >\r\n              Clear\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Visualizer;\r\n","import React from 'react';\r\nimport Game from './Visualizer';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}